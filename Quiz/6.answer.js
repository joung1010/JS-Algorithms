//1. 핵심 시간을 최소로 하고 싶다.
// 제한사항에서 사람은 1명 이상 10억명 이하이고
// 각 심사관이 한명을 심하는데 걸리는 시간은 1분 이상 10억분 이하이다.
// 따라서 사람이나 시간을 기준으로 삼기에는 그 범위가 너무 방대하다.
// 또한 심사관의 수는 1명 이상 10만명 이하기때문에 심사관의 숫자를 기준으로 루프를 돌아서 처리하는게 합당해 보인다.


// 핵심은 10억이라는 숫자를 처리해야되는데 이는 선형시간으로 불가능하고
// 로그시간을 통해서 처리해야되는데 로그시간 하면 이진탐색 알고리즘이 가장 보편적이다.

// 로그 시간 = 이진탐색
// times -> 선형 로그 시간으로 충분히 가능

// 우리는 특정 값을 찾는 것이 아니다.
// 우리가 찾는 것은 최소 몇분에 모든 심사가 끝나는가?
// ㄴ 이러한 특정 조건에 해당하는 값을 찾는 문제를 결정 문제 라고 한다. 즉 결정 문제 = 이진 탐색 = 파라메트릭 서치(Parametric Search)

//1. 최소 1분에서 10억분 * n 사이
//2. 면접관들이 몇 명을 처리하는가??
//3. 처리 가능한 입국자 < n 보다 작다면 분을 올려야되고, 입국자가 n보다 크다면 분을 낮춰야한다.
//4. 면접관이 시간데비 몇 명을 처리할 수 있는가??
// 시간/ 심사시간 = 심사관 당 처리 가능한 입국자 수


function solutrion(n, times) {
    const sortedTimes = times.sort((a, b) => a - b);
    let left = 1; // 한명을 처리하는데 최소 1분이 소요
    let right = sortedTimes[sortedTimes.length - 1] * n;

    while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        // 시간 / 심사시간 으로 심사관 당 처리 가능한 입국자 수를 구한다.
        // 근데 그 값들을 전부 더해야한다.
        const sum = times.reduce((acc, curr) => acc + Math.floor((mid / curr)), 0);

        if (sum < n) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return left;
}